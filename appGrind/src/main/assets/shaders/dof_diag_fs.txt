#version 300 es

uniform sampler2D sTexture;
uniform sampler2D sTextureCoC;
uniform vec2 uSampleOffset1;
uniform vec2 uSampleOffset2;
uniform int uCount;

in vec2 vTexPosition;

out vec4 outFragColor;

void sample(inout vec4 sampleSum, inout float weightSum, in vec2 texPos, in int w) {
    vec4 sample = texture(sTexture, texPos);
    float weight = texture(sTextureCoC, texPos).r * float(w);
    sampleSum += sample * weight;
    weightSum += weight;
}

void main() {
    vec4 sampleCenter = texture(sTexture, vTexPosition);
    vec2 coc = texture(sTextureCoC, vTexPosition).rg;
    // outFragColor = sampleCenter;
    // return;

    if (coc.r > 0.0) {
        vec4 sampleSum1 = sampleCenter;
        vec4 sampleSum2 = sampleCenter;
        float weightSum1 = 1.0;
        float weightSum2 = 1.0;

        vec2 texOffset1 = uSampleOffset1 * coc.r * 0.5;
        vec2 texOffset2 = uSampleOffset2 * coc.r * 0.5;

        for (int i = 0; i < uCount; ++i) {
            sample(sampleSum1, weightSum1, vTexPosition + texOffset1, uCount - i);
            sample(sampleSum1, weightSum1, vTexPosition - texOffset1, uCount - i);
            //sample(sampleSum2, weightSum2, vTexPosition + texOffset2);
            //sample(sampleSum2, weightSum2, vTexPosition - texOffset2);

            texOffset1 += uSampleOffset1 * coc.r;
            texOffset2 += uSampleOffset2 * coc.r;
        }

        sampleSum1 = sampleSum1 / weightSum1;
        sampleSum2 = sampleSum2 / weightSum2;

        outFragColor = sampleSum1;
        //outFragColor = min(sampleSum1, sampleSum2);
    } else {
        outFragColor = sampleCenter;
    }
}
