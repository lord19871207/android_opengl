#version 300 es

uniform sampler2D sTexture;
uniform vec2 uSampleOffset;

in vec2 vTexPosition;

out vec4 outFragColor;

const int radius = 5;
const float n = 1.0 / float((radius + 1) * (radius + 1));

void read(in int i, in int j, inout vec3 m, inout vec3 s) {
    vec3 c = texture(sTexture, vTexPosition + vec2(i, j) * uSampleOffset).rgb;
    m += c; s += c * c;
}

void main() {
    vec3 m[4]; m[0] = vec3(0.0); m[1] = vec3(0.0); m[2] = vec3(0.0); m[3] = vec3(0.0);
    vec3 s[4]; s[0] = vec3(0.0); s[1] = vec3(0.0); s[2] = vec3(0.0); s[3] = vec3(0.0);

    for (int j = 0; j <= radius; ++j)
    for (int i = 0; i <= radius; ++i) {
        read(i, j, m[0], s[0]);
        read(i - radius, j, m[1], s[1]);
        read(i, j - radius, m[2], s[2]);
        read(i - radius, j - radius, m[3], s[3]);
    }

    m[0] *= n;
    s[0] = abs(s[0] * n - m[0] * m[0]);
    float min_sigma2 = dot(vec3(1.0), s[0]);
    outFragColor = vec4(m[0], 1.0);
    for (int k = 1; k < 4; ++k) {
        m[k] *= n;
        s[k] = abs(s[k] * n - m[k] * m[k]);
        float sigma2 = dot(vec3(1.0), s[k]);
        if (sigma2 < min_sigma2) {
            min_sigma2 = sigma2;
            outFragColor = vec4(m[k], 1.0);
        }
    }
}
