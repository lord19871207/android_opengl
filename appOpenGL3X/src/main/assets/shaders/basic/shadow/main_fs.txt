#version 300 es

uniform sampler2DShadow sDepth;
uniform vec4 uMaterial;
uniform vec3 uLightPos;
uniform vec2 uSampleOffset;

in vec3 vPosition;
in vec3 vNormal;
in vec4 vShadowPos;

out vec4 outFragColor;

void main() {
    vec3 L = normalize(uLightPos - vPosition);
    vec3 E = normalize(-vPosition);
    vec3 R = normalize(-reflect(L, vNormal));

    float Iamb = uMaterial.x;

    float Idiff = uMaterial.y * max(dot(vNormal, L), 0.0);
    Idiff = clamp(Idiff, 0.0, 1.0);

    float Ispec = uMaterial.z * pow(max(dot(R, E), 0.0), 0.3 * uMaterial.w);
    Ispec = clamp(Ispec, 0.0, 1.0);

    vec3 sPos = vShadowPos.xyz / vShadowPos.w;

    float biasedZ = clamp(dot(vNormal, L), 0.0, 1.0);
    biasedZ = sqrt(1.0 - biasedZ * biasedZ) / biasedZ;
    biasedZ = sPos.z - min(0.002, 0.001 * biasedZ);

    vec3 color = vec3(0.3, 0.6, 1.0);
    float s = texture(sDepth, vec3(sPos.xy + uSampleOffset, biasedZ)) * 0.25;
    s += texture(sDepth, vec3(sPos.xy + vec2(uSampleOffset.x, -uSampleOffset.y), biasedZ)) * 0.25;
    s += texture(sDepth, vec3(sPos.xy + vec2(-uSampleOffset.x, uSampleOffset.y), biasedZ)) * 0.25;
    s += texture(sDepth, vec3(sPos.xy + vec2(-uSampleOffset.x, -uSampleOffset.y), biasedZ)) * 0.25;
    outFragColor = vec4(color * (Iamb + s * (Idiff + Ispec)), 1.0);
}
